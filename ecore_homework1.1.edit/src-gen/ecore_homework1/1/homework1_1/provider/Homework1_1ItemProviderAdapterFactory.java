/**
 */
package ecore_homework1.1.homework1_1.provider;

import ecore_homework1.1.homework1_1.util.Homework1_1AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Homework1_1ItemProviderAdapterFactory extends Homework1_1AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Homework1_1ItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.ProductPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductPageItemProvider productPageItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.ProductPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductPageAdapter()
	{
		if (productPageItemProvider == null)
		{
			productPageItemProvider = new ProductPageItemProvider(this);
		}

		return productPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.InformationPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationPageItemProvider informationPageItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.InformationPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationPageAdapter()
	{
		if (informationPageItemProvider == null)
		{
			informationPageItemProvider = new InformationPageItemProvider(this);
		}

		return informationPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.BrowsingPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrowsingPageItemProvider browsingPageItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.BrowsingPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrowsingPageAdapter()
	{
		if (browsingPageItemProvider == null)
		{
			browsingPageItemProvider = new BrowsingPageItemProvider(this);
		}

		return browsingPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.LandingPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LandingPageItemProvider landingPageItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.LandingPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLandingPageAdapter()
	{
		if (landingPageItemProvider == null)
		{
			landingPageItemProvider = new LandingPageItemProvider(this);
		}

		return landingPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.ShoppingCart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShoppingCartItemProvider shoppingCartItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.ShoppingCart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShoppingCartAdapter()
	{
		if (shoppingCartItemProvider == null)
		{
			shoppingCartItemProvider = new ShoppingCartItemProvider(this);
		}

		return shoppingCartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.CartItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CartItemItemProvider cartItemItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.CartItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCartItemAdapter()
	{
		if (cartItemItemProvider == null)
		{
			cartItemItemProvider = new CartItemItemProvider(this);
		}

		return cartItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter()
	{
		if (productItemProvider == null)
		{
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Customer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerItemProvider customerItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Customer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerAdapter()
	{
		if (customerItemProvider == null)
		{
			customerItemProvider = new CustomerItemProvider(this);
		}

		return customerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Webapplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebapplicationItemProvider webapplicationItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Webapplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebapplicationAdapter()
	{
		if (webapplicationItemProvider == null)
		{
			webapplicationItemProvider = new WebapplicationItemProvider(this);
		}

		return webapplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.StoreManagementSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreManagementSystemItemProvider storeManagementSystemItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.StoreManagementSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreManagementSystemAdapter()
	{
		if (storeManagementSystemItemProvider == null)
		{
			storeManagementSystemItemProvider = new StoreManagementSystemItemProvider(this);
		}

		return storeManagementSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Order} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderItemProvider orderItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Order}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderAdapter()
	{
		if (orderItemProvider == null)
		{
			orderItemProvider = new OrderItemProvider(this);
		}

		return orderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Employee} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmployeeItemProvider employeeItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Employee}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmployeeAdapter()
	{
		if (employeeItemProvider == null)
		{
			employeeItemProvider = new EmployeeItemProvider(this);
		}

		return employeeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Payment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaymentItemProvider paymentItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Payment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaymentAdapter()
	{
		if (paymentItemProvider == null)
		{
			paymentItemProvider = new PaymentItemProvider(this);
		}

		return paymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore_homework1.1.homework1_1.Store} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreItemProvider storeItemProvider;

	/**
	 * This creates an adapter for a {@link ecore_homework1.1.homework1_1.Store}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreAdapter()
	{
		if (storeItemProvider == null)
		{
			storeItemProvider = new StoreItemProvider(this);
		}

		return storeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose()
	{
		if (productPageItemProvider != null) productPageItemProvider.dispose();
		if (informationPageItemProvider != null) informationPageItemProvider.dispose();
		if (browsingPageItemProvider != null) browsingPageItemProvider.dispose();
		if (landingPageItemProvider != null) landingPageItemProvider.dispose();
		if (shoppingCartItemProvider != null) shoppingCartItemProvider.dispose();
		if (cartItemItemProvider != null) cartItemItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (customerItemProvider != null) customerItemProvider.dispose();
		if (webapplicationItemProvider != null) webapplicationItemProvider.dispose();
		if (storeManagementSystemItemProvider != null) storeManagementSystemItemProvider.dispose();
		if (orderItemProvider != null) orderItemProvider.dispose();
		if (employeeItemProvider != null) employeeItemProvider.dispose();
		if (paymentItemProvider != null) paymentItemProvider.dispose();
		if (storeItemProvider != null) storeItemProvider.dispose();
	}

}
